#!/usr/bin/env node

var program = require('commander');
const chalk = require('chalk');
const ora = require('ora');
const spinnerstyle = require('../libs/spinners.json');
const path = require('path');
const fs = require('fs');

const spinner = ora({
  text: chalk.blue('generate template begin'),
  spinner: spinnerstyle.dots
});

program.on('--help', function() {
  console.log('  Examples:');
  console.log('');
  console.log('    $ uni-smile-cli g --help');
  console.log('    $ uni-smile-cli g -h');
  console.log('');
  console.log(chalk.gray('    # create a new resource files with an template in components directory'));
  console.log('    $ uni-smile-cli g admin resource:supplier:wifi');
  console.log(chalk.gray('    admin: smile/admin path; supplier: moduleName; wifi: resourceName'));
  console.log('');
});

program.parse(process.argv);

/**
 * Help
 */
// (function help () {
//   if (program.args.length < 1) return program.help();
// })()

/**
 * Generate
 */
const baseDir = './src';
const basePath = path.join(process.cwd(), baseDir);

console.log('');
spinner.start('generating, please wait......');
console.log('');

checkBasePathIsexists(basePath, baseDir);

function generate() {
  let baseDir = './admin'
  let moduleName = ''
  let resourceName = ''

  if (program.args.length > 1) {
    baseDir = `./${program.args[0]}`

    if (program.args[1].indexOf('resource:') > -1) {
      const resources = program.args[1].replace('resource:', '').split(':')
      if (resources.length === 0) {
        console.log('uni-smile-cli g admin resource:supplier:wifi')
      } else {
        moduleName = resources[0]
        resourceName = resources[1]
      }
    } else {
      console.log('uni-smile-cli g admin resource:wifi')
    }

    checkPathIsexists(baseDir, moduleName, resourceName)
  } else {
    console.log('uni-smile-cli g admin resource:wifi')
  }
  console.log('');
  spinner.stop();
}

// check basepath
function checkBasePathIsexists(currentPath, currentDir) {
  if (fs.existsSync(currentPath)) {
    generate();
  } else {
    spinner.fail(chalk.red(currentDir + ' directory does not exist'));
  }
}

function checkDirIsexists(baseDir) {
  if(!fs.existsSync(baseDir)) {
    fs.mkdirSync(baseDir)
  }
}

function checkFileIsexists(currentPath, filename, generateFun, template) {
  if(Object.prototype.toString.call(filename) === '[object Array]') {
    filename.forEach(function(onefile) {
      onefile = onefile.replace(/([A-Z])/g,"-$1").toLowerCase();
      let file = path.join(currentPath, './' + onefile);
      generateFun(file, onefile, template);
    })
  } else {
    filename = filename.replace(/([A-Z])/g,"-$1").toLowerCase();
    let file = path.join(currentPath, './' + filename);
    generateFun(file, filename, template);
  }
}


function generateTemplate(filename, templatePath) {
  const template = require(templatePath)(filename)
  return template;
}

function generateJsTemplate(moduleName, filename, templatePath) {
  return require(templatePath)(moduleName, filename)
}

function generateVueFile (file, filename, template) {
  console.log('');
  spinner.start(filename + '.vue' + 'is generating......');
  if(fs.existsSync(file + '.vue')) {
    spinner.fail(chalk.red(filename + '.vue' + ' exists.'));
  } else {
    fs.writeFileSync(file + '.vue', template);
    spinner.succeed(filename + '.vue' + ' generated successfully');
  }
}

function generateJsFile (file, filename, template) {
  console.log('');
  spinner.start(filename + '.js' + 'is generating......');
  if(fs.existsSync(file + '.js')) {
    spinner.fail(chalk.red(filename + '.js' + ' exists.'));
  } else {
    fs.writeFileSync(file + '.js', template);
    spinner.succeed(filename + '.js' + ' generated successfully');
  }
}

function generateCssFile (file, filename, template) {
  console.log('');
  spinner.start(filename + '.css' + 'is generating......');
  if(fs.existsSync(file + '.css')) {
    spinner.fail(chalk.red(filename + '.js' + ' exists.'));
  } else {
    fs.writeFileSync(file + '.css', template);
    spinner.succeed(filename + '.css' + ' generated successfully');
  }
}

function checkPathIsexists(baseDir, moduleName, resourceName) {
  const currentBaseDir = path.join(basePath, baseDir)

  checkDirIsexists(currentBaseDir)

  createViewTemplates(currentBaseDir, moduleName, resourceName)
  craeteApiTemplate(currentBaseDir, moduleName, resourceName)
  createStoreTemplate(currentBaseDir, moduleName, resourceName)
}

function createViewTemplates(currentBaseDir, moduleName, resourceName) {
  const viewFilesDir = `${currentBaseDir}/views`
  const viewModuleDir = `${viewFilesDir}/${moduleName}`
  const viewResourceDir = `${viewFilesDir}/${moduleName}/${resourceName}s`
  const viewResourceComponentsDir = `${viewResourceDir}/components`

  checkDirIsexists(viewFilesDir)
  checkDirIsexists(viewModuleDir)
  checkDirIsexists(viewResourceDir)
  checkDirIsexists(viewResourceComponentsDir)

  checkFileIsexists(viewResourceDir, 'index', generateVueFile, generateTemplate('index', './template/views/indexVueTemplate.js'))
  checkFileIsexists(viewResourceDir, 'index', generateCssFile, generateTemplate('index', './template/views/indexCssTemplate.js'))
}

function craeteApiTemplate(currentBaseDir, moduleName, resourceName){
  const apiFilesDir = `${currentBaseDir}/api`

  checkDirIsexists(apiFilesDir)

  checkFileIsexists(apiFilesDir, resourceName, generateJsFile, generateJsTemplate(moduleName, resourceName, './template/api/resourceTemplate.js'))
}

function createStoreTemplate(currentBaseDir, moduleName, resourceName){
  const storeFilesDir = `${currentBaseDir}/store`
  const storeModuleFilesDir = `${currentBaseDir}/store/modules`

  checkDirIsexists(storeFilesDir)
  checkDirIsexists(storeModuleFilesDir)

  checkFileIsexists(storeModuleFilesDir, resourceName, generateJsFile, generateJsTemplate(moduleName, resourceName, './template/store/storeTemplate.js'))
}
