#!/usr/bin/env node

var program = require('commander');
const chalk = require('chalk');
const ora = require('ora');
const spinnerstyle = require('../libs/spinners.json');
const path = require('path');
const fs = require('fs');

const spinner = ora({
  text: chalk.blue('generate template begin'),
  spinner: spinnerstyle.dots
});

program.on('--help', function() {
  console.log('  Examples:');
  console.log('');
  console.log('    $ vue-g g --help');
  console.log('    $ vue-g g -h');
  console.log('');
  console.log(chalk.gray('    # create a new my-component.vue file with an template in components directory'));
  console.log('    $ vue-g g my-component');
  console.log(chalk.gray('    # create a new my-component.vue file with an template in libs directory'));
  console.log('    $ vue-g g libs my-component');
  console.log(chalk.gray('    # create more new my-component01.vue, my-component02.vue and my-component03.vue files with an template in libs directory'));
  console.log('    $ vue-g g libs my-component01 my-component02 my-component03');
  console.log(chalk.gray('    # create more new my-component01.vue, my-component02.vue and my-component03.vue files with an template in ./components/libs directory'));
  console.log('    $ vue-g g ./components/libs my-component01 my-component02 my-component03');
  console.log('');
});

program.parse(process.argv);

/**
 * Help
 */
// (function help () {
//   if (program.args.length < 1) return program.help();
// })()

/**
 * Generate
 */
const baseDir = './src';
const basePath = path.join(process.cwd(), baseDir);

console.log('');
spinner.start('generating, please wait......');
console.log('');

checkBasePathIsexists(basePath, baseDir);

function generate() {
  let baseDir = './admin'
  let moduleName = ''
  let resourceName = ''

  if (program.args.length > 1) {
    baseDir = `./${program.args[0]}`

    if (program.args[1].indexOf('resource:') > -1) {
      const resources = program.args[1].replace('resource:', '').split(':')
      if (resources.length === 0) {
        console.log('uni-smile-cli g admin resource:supplier:wifi')
      } else {
        moduleName = resources[0]
        resourceName = resources[1]
      }
    } else {
      console.log('uni-smile-cli g admin resource:wifi')
    }

    checkPathIsexists(baseDir, moduleName, resourceName, 'index')
  } else {
    console.log('uni-smile-cli g admin resource:wifi')
  }
  console.log('');
  spinner.stop();
}

// check basepath
function checkBasePathIsexists(currentPath, currentDir) {
  if (fs.existsSync(currentPath)) {
    generate();
  } else {
    spinner.fail(chalk.red(currentDir + ' directory does not exist'));
  }
}

function checkDirIsexists(baseDir) {
  if(!fs.existsSync(baseDir)) {
    fs.mkdirSync(baseDir)
  }
}

function checkPathIsexists(baseDir, moduleName, resourceName, filename) {
  const currentBaseDir = path.join(basePath, baseDir);
  const viewFilesDir = `${currentBaseDir}/views`
  const viewModuleDir = `${viewFilesDir}/${moduleName}`
  const viewResourceDir = `${viewFilesDir}/${moduleName}/${resourceName}`
  const viewResourceComponentsDir = `${viewResourceDir}/components`

  checkDirIsexists(currentBaseDir)
  checkDirIsexists(viewFilesDir)
  checkDirIsexists(viewModuleDir)
  checkDirIsexists(viewResourceDir)
  checkDirIsexists(viewResourceComponentsDir)

  createViewTemplates(viewResourceDir, filename, generateTemplate(filename, './template/indexVueTemplate.js'))
  createViewTemplates(viewResourceComponentsDir, filename, generateTemplate(filename, './template/indexVueTemplate.js'))
}

function createViewTemplates(currentPath, filename, template) {
  if(Object.prototype.toString.call(filename) === '[object Array]') {
    filename.forEach(function(onefile) {
      onefile = onefile.replace(/([A-Z])/g,"-$1").toLowerCase();
      let file = path.join(currentPath, './' + onefile);
      generateVueFile(file, onefile, template);
    })
  } else {
    filename = filename.replace(/([A-Z])/g,"-$1").toLowerCase();
    let file = path.join(currentPath, './' + filename);
    generateVueFile(file, filename, template);
  }
}

function generateVueFile(file, filename, template) {
  console.log('');
  spinner.start(filename + '.vue' + 'is generating......');
  if(fs.existsSync(file + '.vue')) {
    spinner.fail(chalk.red(filename + '.vue' + ' exists.'));
  } else {
    fs.writeFileSync(file + '.vue', template);
    spinner.succeed(filename + '.vue' + ' generated successfully');
  }
}

function generateJsFile(file, filename, template) {
  console.log('');
  spinner.start(filename + '.js' + 'is generating......');
  if(fs.existsSync(file + '.js')) {
    spinner.fail(chalk.red(filename + '.js' + ' exists.'));
  } else {
    fs.writeFileSync(file + '.js', template);
    spinner.succeed(filename + '.js' + ' generated successfully');
  }
}

function generateCssFile(file, filename) {
  console.log('');
  spinner.start(filename + '.css' + 'is generating......');
  if(fs.existsSync(file + '.css')) {
    spinner.fail(chalk.red(filename + '.js' + ' exists.'));
  } else {
    fs.writeFileSync(file + '.css', template);
    spinner.succeed(filename + '.css' + ' generated successfully');
  }
}

function generateTemplate(filename, templatePath) {
  const template = require(templatePath)(filename)
  return template;
}
